/**
 *
 *  Tickets.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Tickets.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::simple12306;

const std::string Tickets::Cols::_id = "id";
const std::string Tickets::Cols::_title = "title";
const std::string Tickets::Cols::_from = "from";
const std::string Tickets::Cols::_to = "to";
const std::string Tickets::Cols::_start_date = "start_date";
const std::string Tickets::Cols::_end_date = "end_date";
const std::string Tickets::Cols::_price = "price";
const std::string Tickets::Cols::_train_type = "train_type";
const std::string Tickets::Cols::_type_1 = "type_1";
const std::string Tickets::Cols::_type_2 = "type_2";
const std::string Tickets::Cols::_type_3 = "type_3";
const std::string Tickets::Cols::_type_4 = "type_4";
const std::string Tickets::primaryKeyName = "id";
const bool Tickets::hasPrimaryKey = true;
const std::string Tickets::tableName = "tickets";

const std::vector<typename Tickets::MetaData> Tickets::metaData_={
{"id","int32_t","integer",4,1,1,1},
{"title","std::string","character varying",255,0,0,1},
{"from","std::string","character varying",255,0,0,1},
{"to","std::string","character varying",255,0,0,1},
{"start_date","::trantor::Date","timestamp without time zone",0,0,0,1},
{"end_date","::trantor::Date","timestamp without time zone",0,0,0,1},
{"price","std::string","numeric",0,0,0,1},
{"train_type","int32_t","integer",4,0,0,1},
{"type_1","int32_t","integer",4,0,0,1},
{"type_2","int32_t","integer",4,0,0,0},
{"type_3","int32_t","integer",4,0,0,0},
{"type_4","int32_t","integer",4,0,0,0}
};
const std::string &Tickets::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Tickets::Tickets(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["title"].isNull())
        {
            title_=std::make_shared<std::string>(r["title"].as<std::string>());
        }
        if(!r["from"].isNull())
        {
            from_=std::make_shared<std::string>(r["from"].as<std::string>());
        }
        if(!r["to"].isNull())
        {
            to_=std::make_shared<std::string>(r["to"].as<std::string>());
        }
        if(!r["start_date"].isNull())
        {
            auto timeStr = r["start_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                startDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["end_date"].isNull())
        {
            auto timeStr = r["end_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                endDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["price"].isNull())
        {
            price_=std::make_shared<std::string>(r["price"].as<std::string>());
        }
        if(!r["train_type"].isNull())
        {
            trainType_=std::make_shared<int32_t>(r["train_type"].as<int32_t>());
        }
        if(!r["type_1"].isNull())
        {
            type1_=std::make_shared<int32_t>(r["type_1"].as<int32_t>());
        }
        if(!r["type_2"].isNull())
        {
            type2_=std::make_shared<int32_t>(r["type_2"].as<int32_t>());
        }
        if(!r["type_3"].isNull())
        {
            type3_=std::make_shared<int32_t>(r["type_3"].as<int32_t>());
        }
        if(!r["type_4"].isNull())
        {
            type4_=std::make_shared<int32_t>(r["type_4"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 12 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            title_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            from_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            to_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                startDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                endDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            price_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            trainType_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            type1_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            type2_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            type3_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            type4_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

Tickets::Tickets(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            from_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            to_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                startDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                endDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            price_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            trainType_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            type1_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            type2_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            type3_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[10]].asInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            type4_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[11]].asInt64());
        }
    }
}

Tickets::Tickets(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("title"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["title"].asString());
        }
    }
    if(pJson.isMember("from"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["from"].isNull())
        {
            from_=std::make_shared<std::string>(pJson["from"].asString());
        }
    }
    if(pJson.isMember("to"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["to"].isNull())
        {
            to_=std::make_shared<std::string>(pJson["to"].asString());
        }
    }
    if(pJson.isMember("start_date"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["start_date"].isNull())
        {
            auto timeStr = pJson["start_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                startDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("end_date"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["end_date"].isNull())
        {
            auto timeStr = pJson["end_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                endDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("price"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["price"].isNull())
        {
            price_=std::make_shared<std::string>(pJson["price"].asString());
        }
    }
    if(pJson.isMember("train_type"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["train_type"].isNull())
        {
            trainType_=std::make_shared<int32_t>((int32_t)pJson["train_type"].asInt64());
        }
    }
    if(pJson.isMember("type_1"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["type_1"].isNull())
        {
            type1_=std::make_shared<int32_t>((int32_t)pJson["type_1"].asInt64());
        }
    }
    if(pJson.isMember("type_2"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["type_2"].isNull())
        {
            type2_=std::make_shared<int32_t>((int32_t)pJson["type_2"].asInt64());
        }
    }
    if(pJson.isMember("type_3"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["type_3"].isNull())
        {
            type3_=std::make_shared<int32_t>((int32_t)pJson["type_3"].asInt64());
        }
    }
    if(pJson.isMember("type_4"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["type_4"].isNull())
        {
            type4_=std::make_shared<int32_t>((int32_t)pJson["type_4"].asInt64());
        }
    }
}

void Tickets::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            title_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            from_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            to_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                startDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                endDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            price_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            trainType_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[7]].asInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            type1_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            type2_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            type3_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[10]].asInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            type4_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[11]].asInt64());
        }
    }
}

void Tickets::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("title"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["title"].isNull())
        {
            title_=std::make_shared<std::string>(pJson["title"].asString());
        }
    }
    if(pJson.isMember("from"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["from"].isNull())
        {
            from_=std::make_shared<std::string>(pJson["from"].asString());
        }
    }
    if(pJson.isMember("to"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["to"].isNull())
        {
            to_=std::make_shared<std::string>(pJson["to"].asString());
        }
    }
    if(pJson.isMember("start_date"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["start_date"].isNull())
        {
            auto timeStr = pJson["start_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                startDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("end_date"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["end_date"].isNull())
        {
            auto timeStr = pJson["end_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                endDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("price"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["price"].isNull())
        {
            price_=std::make_shared<std::string>(pJson["price"].asString());
        }
    }
    if(pJson.isMember("train_type"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["train_type"].isNull())
        {
            trainType_=std::make_shared<int32_t>((int32_t)pJson["train_type"].asInt64());
        }
    }
    if(pJson.isMember("type_1"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["type_1"].isNull())
        {
            type1_=std::make_shared<int32_t>((int32_t)pJson["type_1"].asInt64());
        }
    }
    if(pJson.isMember("type_2"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["type_2"].isNull())
        {
            type2_=std::make_shared<int32_t>((int32_t)pJson["type_2"].asInt64());
        }
    }
    if(pJson.isMember("type_3"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["type_3"].isNull())
        {
            type3_=std::make_shared<int32_t>((int32_t)pJson["type_3"].asInt64());
        }
    }
    if(pJson.isMember("type_4"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["type_4"].isNull())
        {
            type4_=std::make_shared<int32_t>((int32_t)pJson["type_4"].asInt64());
        }
    }
}

const int32_t &Tickets::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Tickets::getId() const noexcept
{
    return id_;
}
void Tickets::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Tickets::PrimaryKeyType & Tickets::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Tickets::getValueOfTitle() const noexcept
{
    static const std::string defaultValue = std::string();
    if(title_)
        return *title_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Tickets::getTitle() const noexcept
{
    return title_;
}
void Tickets::setTitle(const std::string &pTitle) noexcept
{
    title_ = std::make_shared<std::string>(pTitle);
    dirtyFlag_[1] = true;
}
void Tickets::setTitle(std::string &&pTitle) noexcept
{
    title_ = std::make_shared<std::string>(std::move(pTitle));
    dirtyFlag_[1] = true;
}

const std::string &Tickets::getValueOfFrom() const noexcept
{
    static const std::string defaultValue = std::string();
    if(from_)
        return *from_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Tickets::getFrom() const noexcept
{
    return from_;
}
void Tickets::setFrom(const std::string &pFrom) noexcept
{
    from_ = std::make_shared<std::string>(pFrom);
    dirtyFlag_[2] = true;
}
void Tickets::setFrom(std::string &&pFrom) noexcept
{
    from_ = std::make_shared<std::string>(std::move(pFrom));
    dirtyFlag_[2] = true;
}

const std::string &Tickets::getValueOfTo() const noexcept
{
    static const std::string defaultValue = std::string();
    if(to_)
        return *to_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Tickets::getTo() const noexcept
{
    return to_;
}
void Tickets::setTo(const std::string &pTo) noexcept
{
    to_ = std::make_shared<std::string>(pTo);
    dirtyFlag_[3] = true;
}
void Tickets::setTo(std::string &&pTo) noexcept
{
    to_ = std::make_shared<std::string>(std::move(pTo));
    dirtyFlag_[3] = true;
}

const ::trantor::Date &Tickets::getValueOfStartDate() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(startDate_)
        return *startDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Tickets::getStartDate() const noexcept
{
    return startDate_;
}
void Tickets::setStartDate(const ::trantor::Date &pStartDate) noexcept
{
    startDate_ = std::make_shared<::trantor::Date>(pStartDate);
    dirtyFlag_[4] = true;
}

const ::trantor::Date &Tickets::getValueOfEndDate() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(endDate_)
        return *endDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Tickets::getEndDate() const noexcept
{
    return endDate_;
}
void Tickets::setEndDate(const ::trantor::Date &pEndDate) noexcept
{
    endDate_ = std::make_shared<::trantor::Date>(pEndDate);
    dirtyFlag_[5] = true;
}

const std::string &Tickets::getValueOfPrice() const noexcept
{
    static const std::string defaultValue = std::string();
    if(price_)
        return *price_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Tickets::getPrice() const noexcept
{
    return price_;
}
void Tickets::setPrice(const std::string &pPrice) noexcept
{
    price_ = std::make_shared<std::string>(pPrice);
    dirtyFlag_[6] = true;
}
void Tickets::setPrice(std::string &&pPrice) noexcept
{
    price_ = std::make_shared<std::string>(std::move(pPrice));
    dirtyFlag_[6] = true;
}

const int32_t &Tickets::getValueOfTrainType() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(trainType_)
        return *trainType_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Tickets::getTrainType() const noexcept
{
    return trainType_;
}
void Tickets::setTrainType(const int32_t &pTrainType) noexcept
{
    trainType_ = std::make_shared<int32_t>(pTrainType);
    dirtyFlag_[7] = true;
}

const int32_t &Tickets::getValueOfType1() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(type1_)
        return *type1_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Tickets::getType1() const noexcept
{
    return type1_;
}
void Tickets::setType1(const int32_t &pType1) noexcept
{
    type1_ = std::make_shared<int32_t>(pType1);
    dirtyFlag_[8] = true;
}

const int32_t &Tickets::getValueOfType2() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(type2_)
        return *type2_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Tickets::getType2() const noexcept
{
    return type2_;
}
void Tickets::setType2(const int32_t &pType2) noexcept
{
    type2_ = std::make_shared<int32_t>(pType2);
    dirtyFlag_[9] = true;
}
void Tickets::setType2ToNull() noexcept
{
    type2_.reset();
    dirtyFlag_[9] = true;
}

const int32_t &Tickets::getValueOfType3() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(type3_)
        return *type3_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Tickets::getType3() const noexcept
{
    return type3_;
}
void Tickets::setType3(const int32_t &pType3) noexcept
{
    type3_ = std::make_shared<int32_t>(pType3);
    dirtyFlag_[10] = true;
}
void Tickets::setType3ToNull() noexcept
{
    type3_.reset();
    dirtyFlag_[10] = true;
}

const int32_t &Tickets::getValueOfType4() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(type4_)
        return *type4_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Tickets::getType4() const noexcept
{
    return type4_;
}
void Tickets::setType4(const int32_t &pType4) noexcept
{
    type4_ = std::make_shared<int32_t>(pType4);
    dirtyFlag_[11] = true;
}
void Tickets::setType4ToNull() noexcept
{
    type4_.reset();
    dirtyFlag_[11] = true;
}

void Tickets::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Tickets::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "title",
        "from",
        "to",
        "start_date",
        "end_date",
        "price",
        "train_type",
        "type_1",
        "type_2",
        "type_3",
        "type_4"
    };
    return inCols;
}

void Tickets::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getFrom())
        {
            binder << getValueOfFrom();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTo())
        {
            binder << getValueOfTo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getStartDate())
        {
            binder << getValueOfStartDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getEndDate())
        {
            binder << getValueOfEndDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getPrice())
        {
            binder << getValueOfPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getTrainType())
        {
            binder << getValueOfTrainType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getType1())
        {
            binder << getValueOfType1();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getType2())
        {
            binder << getValueOfType2();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getType3())
        {
            binder << getValueOfType3();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getType4())
        {
            binder << getValueOfType4();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Tickets::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    return ret;
}

void Tickets::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTitle())
        {
            binder << getValueOfTitle();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getFrom())
        {
            binder << getValueOfFrom();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTo())
        {
            binder << getValueOfTo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getStartDate())
        {
            binder << getValueOfStartDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getEndDate())
        {
            binder << getValueOfEndDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getPrice())
        {
            binder << getValueOfPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getTrainType())
        {
            binder << getValueOfTrainType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getType1())
        {
            binder << getValueOfType1();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getType2())
        {
            binder << getValueOfType2();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getType3())
        {
            binder << getValueOfType3();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getType4())
        {
            binder << getValueOfType4();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Tickets::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getFrom())
    {
        ret["from"]=getValueOfFrom();
    }
    else
    {
        ret["from"]=Json::Value();
    }
    if(getTo())
    {
        ret["to"]=getValueOfTo();
    }
    else
    {
        ret["to"]=Json::Value();
    }
    if(getStartDate())
    {
        ret["start_date"]=getStartDate()->toDbStringLocal();
    }
    else
    {
        ret["start_date"]=Json::Value();
    }
    if(getEndDate())
    {
        ret["end_date"]=getEndDate()->toDbStringLocal();
    }
    else
    {
        ret["end_date"]=Json::Value();
    }
    if(getPrice())
    {
        ret["price"]=getValueOfPrice();
    }
    else
    {
        ret["price"]=Json::Value();
    }
    if(getTrainType())
    {
        ret["train_type"]=getValueOfTrainType();
    }
    else
    {
        ret["train_type"]=Json::Value();
    }
    if(getType1())
    {
        ret["type_1"]=getValueOfType1();
    }
    else
    {
        ret["type_1"]=Json::Value();
    }
    if(getType2())
    {
        ret["type_2"]=getValueOfType2();
    }
    else
    {
        ret["type_2"]=Json::Value();
    }
    if(getType3())
    {
        ret["type_3"]=getValueOfType3();
    }
    else
    {
        ret["type_3"]=Json::Value();
    }
    if(getType4())
    {
        ret["type_4"]=getValueOfType4();
    }
    else
    {
        ret["type_4"]=Json::Value();
    }
    return ret;
}

Json::Value Tickets::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 12)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTitle())
            {
                ret[pMasqueradingVector[1]]=getValueOfTitle();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getFrom())
            {
                ret[pMasqueradingVector[2]]=getValueOfFrom();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getTo())
            {
                ret[pMasqueradingVector[3]]=getValueOfTo();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getStartDate())
            {
                ret[pMasqueradingVector[4]]=getStartDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getEndDate())
            {
                ret[pMasqueradingVector[5]]=getEndDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getPrice())
            {
                ret[pMasqueradingVector[6]]=getValueOfPrice();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getTrainType())
            {
                ret[pMasqueradingVector[7]]=getValueOfTrainType();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getType1())
            {
                ret[pMasqueradingVector[8]]=getValueOfType1();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getType2())
            {
                ret[pMasqueradingVector[9]]=getValueOfType2();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getType3())
            {
                ret[pMasqueradingVector[10]]=getValueOfType3();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getType4())
            {
                ret[pMasqueradingVector[11]]=getValueOfType4();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getTitle())
    {
        ret["title"]=getValueOfTitle();
    }
    else
    {
        ret["title"]=Json::Value();
    }
    if(getFrom())
    {
        ret["from"]=getValueOfFrom();
    }
    else
    {
        ret["from"]=Json::Value();
    }
    if(getTo())
    {
        ret["to"]=getValueOfTo();
    }
    else
    {
        ret["to"]=Json::Value();
    }
    if(getStartDate())
    {
        ret["start_date"]=getStartDate()->toDbStringLocal();
    }
    else
    {
        ret["start_date"]=Json::Value();
    }
    if(getEndDate())
    {
        ret["end_date"]=getEndDate()->toDbStringLocal();
    }
    else
    {
        ret["end_date"]=Json::Value();
    }
    if(getPrice())
    {
        ret["price"]=getValueOfPrice();
    }
    else
    {
        ret["price"]=Json::Value();
    }
    if(getTrainType())
    {
        ret["train_type"]=getValueOfTrainType();
    }
    else
    {
        ret["train_type"]=Json::Value();
    }
    if(getType1())
    {
        ret["type_1"]=getValueOfType1();
    }
    else
    {
        ret["type_1"]=Json::Value();
    }
    if(getType2())
    {
        ret["type_2"]=getValueOfType2();
    }
    else
    {
        ret["type_2"]=Json::Value();
    }
    if(getType3())
    {
        ret["type_3"]=getValueOfType3();
    }
    else
    {
        ret["type_3"]=Json::Value();
    }
    if(getType4())
    {
        ret["type_4"]=getValueOfType4();
    }
    else
    {
        ret["type_4"]=Json::Value();
    }
    return ret;
}

bool Tickets::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("title"))
    {
        if(!validJsonOfField(1, "title", pJson["title"], err, true))
            return false;
    }
    else
    {
        err="The title column cannot be null";
        return false;
    }
    if(pJson.isMember("from"))
    {
        if(!validJsonOfField(2, "from", pJson["from"], err, true))
            return false;
    }
    else
    {
        err="The from column cannot be null";
        return false;
    }
    if(pJson.isMember("to"))
    {
        if(!validJsonOfField(3, "to", pJson["to"], err, true))
            return false;
    }
    else
    {
        err="The to column cannot be null";
        return false;
    }
    if(pJson.isMember("start_date"))
    {
        if(!validJsonOfField(4, "start_date", pJson["start_date"], err, true))
            return false;
    }
    else
    {
        err="The start_date column cannot be null";
        return false;
    }
    if(pJson.isMember("end_date"))
    {
        if(!validJsonOfField(5, "end_date", pJson["end_date"], err, true))
            return false;
    }
    else
    {
        err="The end_date column cannot be null";
        return false;
    }
    if(pJson.isMember("price"))
    {
        if(!validJsonOfField(6, "price", pJson["price"], err, true))
            return false;
    }
    else
    {
        err="The price column cannot be null";
        return false;
    }
    if(pJson.isMember("train_type"))
    {
        if(!validJsonOfField(7, "train_type", pJson["train_type"], err, true))
            return false;
    }
    else
    {
        err="The train_type column cannot be null";
        return false;
    }
    if(pJson.isMember("type_1"))
    {
        if(!validJsonOfField(8, "type_1", pJson["type_1"], err, true))
            return false;
    }
    else
    {
        err="The type_1 column cannot be null";
        return false;
    }
    if(pJson.isMember("type_2"))
    {
        if(!validJsonOfField(9, "type_2", pJson["type_2"], err, true))
            return false;
    }
    if(pJson.isMember("type_3"))
    {
        if(!validJsonOfField(10, "type_3", pJson["type_3"], err, true))
            return false;
    }
    if(pJson.isMember("type_4"))
    {
        if(!validJsonOfField(11, "type_4", pJson["type_4"], err, true))
            return false;
    }
    return true;
}
bool Tickets::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[8] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Tickets::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("title"))
    {
        if(!validJsonOfField(1, "title", pJson["title"], err, false))
            return false;
    }
    if(pJson.isMember("from"))
    {
        if(!validJsonOfField(2, "from", pJson["from"], err, false))
            return false;
    }
    if(pJson.isMember("to"))
    {
        if(!validJsonOfField(3, "to", pJson["to"], err, false))
            return false;
    }
    if(pJson.isMember("start_date"))
    {
        if(!validJsonOfField(4, "start_date", pJson["start_date"], err, false))
            return false;
    }
    if(pJson.isMember("end_date"))
    {
        if(!validJsonOfField(5, "end_date", pJson["end_date"], err, false))
            return false;
    }
    if(pJson.isMember("price"))
    {
        if(!validJsonOfField(6, "price", pJson["price"], err, false))
            return false;
    }
    if(pJson.isMember("train_type"))
    {
        if(!validJsonOfField(7, "train_type", pJson["train_type"], err, false))
            return false;
    }
    if(pJson.isMember("type_1"))
    {
        if(!validJsonOfField(8, "type_1", pJson["type_1"], err, false))
            return false;
    }
    if(pJson.isMember("type_2"))
    {
        if(!validJsonOfField(9, "type_2", pJson["type_2"], err, false))
            return false;
    }
    if(pJson.isMember("type_3"))
    {
        if(!validJsonOfField(10, "type_3", pJson["type_3"], err, false))
            return false;
    }
    if(pJson.isMember("type_4"))
    {
        if(!validJsonOfField(11, "type_4", pJson["type_4"], err, false))
            return false;
    }
    return true;
}
bool Tickets::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Tickets::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
